## *** About GitHub *** ##

git config - Утилита? которая позваоляет просматривать и настраивать параметры, контролирующие все аспекты работы Git, а также его внешний вид
git config -l - Cписок конфигурации Git
git config --global user.name "Имя Фамилия"
git config --global user.email Email@example.com
git config --global core.editor emacs - Если вы хотите использовать другой текстовый редактор, например, Emacs
git config --global core.editor "'C:\Program Files (x86)\Notepad++\notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
git config --list --show-origin


git init - создает новый репозиторий Git и инициализация директории для отсдеживания контроля версии по проекту.
git status - Проверка состояния фпйлов.

git log - отображает отправленные снимки состояния и позволяет просматривать и фильтровать историю проекта, а также проводить поиск по ней.
git log -n <limit> - Ограничивает число коммитов с помощью параметра.
git log -p - выводит патчи, соответствующие определенным коммитам.
git log --author="<pattern>" - выполняет поиск коммитов конкретного автора.
git log --grep="<pattern>" - выполняет поиск коммитов с сообщениями, соответствующими аргументу <pattern>
git log <file> - выводит только коммиты, содержащие указанный файл <file>
git log --graph - визукльное состояние веток проекта.
git log --oneline - коммит в одну строку и получить подробный обзор всей истории проекта.
git log --stat - коммит в одну строку и получить подробный обзор всей истории проекта.
git log --graph --decorate --oneline - содержится несколько полезных параметров: 
флаг --graph создает основанную на тексте диаграмму коммитов в левой части области сообщений коммитов; 
флаг --decorate добавляет отображаемые имена веток или теги коммитов;
флаг --oneline записывает информацию о коммите в одну строку, что позволяет без труда просматривать множество коммитов сразу.

git add . - всех файлов или указваем только нужные через пробел. Для исключения используем файл: .gitignore

git diff - позволяет проанализировать добавляемые изменения и исправить возможные ошибки.

git commit - добавление проиндексированное сосотояние файлов. Атрибуты -m, создает коммит с указанным комментарием.
git rm - удаление отслеживаемого файла или отслеживаемых файлов из раздела проиндексированных файлов Git.
git mv - перемещает или переименовывает файлы, автоматически “уведомляя” об этих событиях область “Staging Area”.

git branch - управления ветками в репозитории Git.
git branch or git branch --list
git branch <branch> - создание ветки <branch>
git branch -d <branch> - удаление указанной ветки <branch>
git branch -D <branch> - принудительное удаление указанной ветки <branch>
git branch -m <branch> - изменение имени текущей ветки на <branch>
git branch -a - вывод списка всех удаленных веток.

git checkout - использоваться для переключения между ветками. Команда checkout используется для копирования файлов из истории или сцены в рабочую директорию.

git clone - клонирования репозитория - используется для первоначального копирования репозитория, т.е. для создания копии,  скачает всю информацию.

git push - команда для получения последних изменений - используется именно для получения последних изменений, т.е. для получения той информации, что добавили ваши коллеги - скачает только последние изменения.

git push <remote> <branch> - публикация указанной ветки в удаленном репозитории вместе со всеми необходимыми коммитами и внутренними объектами.

Задаем репозиторий: git remote add origin https://github.com/Название_проекта
Заливай в репозиторий: git push -f origin main

git push <remote> --force - Принудительная публикация указанной ветки в удаленном репозитории.
git push -f origin main - принудительное выполнение публикации.
git push <remote> --all - публикация всех локальных веток в указанном удаленном репозитории.
